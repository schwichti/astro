/*
 * LH Public API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OffersApi {
    private ApiClient apiClient;

    public OffersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OffersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for offersLoungesByLocationGet
     * @param location 3-leter IATA airport or city code (e.g. &#39;ZRH&#39;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39; (Acceptable values are: \&quot;\&quot;, \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (optional)
     * @param tierCode Frequent flyer level (&#39;FTL&#39;, &#39;SGC&#39;, &#39;SEN&#39;, &#39;HON&#39;) (Acceptable values are: \&quot;\&quot;, \&quot;FTL\&quot;, \&quot;SGC\&quot;, \&quot;SEN\&quot;, \&quot;HON\&quot;) (optional)
     * @param lang Language code. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call offersLoungesByLocationGetCall(String location, String accept, String cabinClass, String tierCode, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/lounges/{location}"
            .replaceAll("\\{" + "location" + "\\}", apiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cabinClass != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cabinClass", cabinClass));
        if (tierCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tierCode", tierCode));
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call offersLoungesByLocationGetValidateBeforeCall(String location, String accept, String cabinClass, String tierCode, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling offersLoungesByLocationGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling offersLoungesByLocationGet(Async)");
        }
        

        com.squareup.okhttp.Call call = offersLoungesByLocationGetCall(location, accept, cabinClass, tierCode, lang, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lounges
     * Lounge information
     * @param location 3-leter IATA airport or city code (e.g. &#39;ZRH&#39;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39; (Acceptable values are: \&quot;\&quot;, \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (optional)
     * @param tierCode Frequent flyer level (&#39;FTL&#39;, &#39;SGC&#39;, &#39;SEN&#39;, &#39;HON&#39;) (Acceptable values are: \&quot;\&quot;, \&quot;FTL\&quot;, \&quot;SGC\&quot;, \&quot;SEN\&quot;, \&quot;HON\&quot;) (optional)
     * @param lang Language code. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String offersLoungesByLocationGet(String location, String accept, String cabinClass, String tierCode, String lang) throws ApiException {
        ApiResponse<String> resp = offersLoungesByLocationGetWithHttpInfo(location, accept, cabinClass, tierCode, lang);
        return resp.getData();
    }

    /**
     * Lounges
     * Lounge information
     * @param location 3-leter IATA airport or city code (e.g. &#39;ZRH&#39;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39; (Acceptable values are: \&quot;\&quot;, \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (optional)
     * @param tierCode Frequent flyer level (&#39;FTL&#39;, &#39;SGC&#39;, &#39;SEN&#39;, &#39;HON&#39;) (Acceptable values are: \&quot;\&quot;, \&quot;FTL\&quot;, \&quot;SGC\&quot;, \&quot;SEN\&quot;, \&quot;HON\&quot;) (optional)
     * @param lang Language code. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> offersLoungesByLocationGetWithHttpInfo(String location, String accept, String cabinClass, String tierCode, String lang) throws ApiException {
        com.squareup.okhttp.Call call = offersLoungesByLocationGetValidateBeforeCall(location, accept, cabinClass, tierCode, lang, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lounges (asynchronously)
     * Lounge information
     * @param location 3-leter IATA airport or city code (e.g. &#39;ZRH&#39;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39; (Acceptable values are: \&quot;\&quot;, \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (optional)
     * @param tierCode Frequent flyer level (&#39;FTL&#39;, &#39;SGC&#39;, &#39;SEN&#39;, &#39;HON&#39;) (Acceptable values are: \&quot;\&quot;, \&quot;FTL\&quot;, \&quot;SGC\&quot;, \&quot;SEN\&quot;, \&quot;HON\&quot;) (optional)
     * @param lang Language code. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call offersLoungesByLocationGetAsync(String location, String accept, String cabinClass, String tierCode, String lang, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = offersLoungesByLocationGetValidateBeforeCall(location, accept, cabinClass, tierCode, lang, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH2037&#39;) (required)
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;TXL&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;MUC&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39;. Some flights have fewer classes (Acceptable values are: \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetCall(String flightNumber, String origin, String destination, String date, String cabinClass, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offers/seatmaps/{flightNumber}/{origin}/{destination}/{date}/{cabinClass}"
            .replaceAll("\\{" + "flightNumber" + "\\}", apiClient.escapeString(flightNumber.toString()))
            .replaceAll("\\{" + "origin" + "\\}", apiClient.escapeString(origin.toString()))
            .replaceAll("\\{" + "destination" + "\\}", apiClient.escapeString(destination.toString()))
            .replaceAll("\\{" + "date" + "\\}", apiClient.escapeString(date.toString()))
            .replaceAll("\\{" + "cabinClass" + "\\}", apiClient.escapeString(cabinClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetValidateBeforeCall(String flightNumber, String origin, String destination, String date, String cabinClass, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'flightNumber' is set
        if (flightNumber == null) {
            throw new ApiException("Missing the required parameter 'flightNumber' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet(Async)");
        }
        
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet(Async)");
        }
        
        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet(Async)");
        }
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet(Async)");
        }
        
        // verify the required parameter 'cabinClass' is set
        if (cabinClass == null) {
            throw new ApiException("Missing the required parameter 'cabinClass' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet(Async)");
        }
        

        com.squareup.okhttp.Call call = offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetCall(flightNumber, origin, destination, date, cabinClass, accept, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Seat Maps
     * Cabin layout and seat characteristics.
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH2037&#39;) (required)
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;TXL&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;MUC&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39;. Some flights have fewer classes (Acceptable values are: \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGet(String flightNumber, String origin, String destination, String date, String cabinClass, String accept) throws ApiException {
        ApiResponse<String> resp = offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetWithHttpInfo(flightNumber, origin, destination, date, cabinClass, accept);
        return resp.getData();
    }

    /**
     * Seat Maps
     * Cabin layout and seat characteristics.
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH2037&#39;) (required)
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;TXL&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;MUC&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39;. Some flights have fewer classes (Acceptable values are: \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetWithHttpInfo(String flightNumber, String origin, String destination, String date, String cabinClass, String accept) throws ApiException {
        com.squareup.okhttp.Call call = offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetValidateBeforeCall(flightNumber, origin, destination, date, cabinClass, accept, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Seat Maps (asynchronously)
     * Cabin layout and seat characteristics.
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH2037&#39;) (required)
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;TXL&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;MUC&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) (required)
     * @param cabinClass Cabin class: &#39;M&#39;, &#39;E&#39;, &#39;C&#39;, &#39;F&#39;. Some flights have fewer classes (Acceptable values are: \&quot;M\&quot;, \&quot;E\&quot;, \&quot;C\&quot;, \&quot;F\&quot;) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetAsync(String flightNumber, String origin, String destination, String date, String cabinClass, String accept, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = offersSeatmapsDestinationDateCabinClassByFlightNumberAndOriginGetValidateBeforeCall(flightNumber, origin, destination, date, cabinClass, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
