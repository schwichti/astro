/*
 * LH Public API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CargoApi {
    private ApiClient apiClient;

    public CargoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CargoApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cargoGetRouteFromDateProductCodeByOriginAndDestinationGet
     * @param origin Departure Airport : 3-letter IATA airport code, e.g. FRA. (required)
     * @param destination Arrival airport : 3-letter IATA airport code, e.g. HKG. (required)
     * @param fromDate Departure date in the local time of the departure airport. Based on LAT (Latest Acceptance Time). format : yyyy-MM-dd eg : 2017-07-15 (required)
     * @param productCode Product code for requested service and specials : 3-letter eg: YNZ (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cargoGetRouteFromDateProductCodeByOriginAndDestinationGetCall(String origin, String destination, String fromDate, String productCode, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cargo/getRoute/{origin}-{destination}/{fromDate}/{productCode}"
            .replaceAll("\\{" + "origin" + "\\}", apiClient.escapeString(origin.toString()))
            .replaceAll("\\{" + "destination" + "\\}", apiClient.escapeString(destination.toString()))
            .replaceAll("\\{" + "fromDate" + "\\}", apiClient.escapeString(fromDate.toString()))
            .replaceAll("\\{" + "productCode" + "\\}", apiClient.escapeString(productCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cargoGetRouteFromDateProductCodeByOriginAndDestinationGetValidateBeforeCall(String origin, String destination, String fromDate, String productCode, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling cargoGetRouteFromDateProductCodeByOriginAndDestinationGet(Async)");
        }
        
        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling cargoGetRouteFromDateProductCodeByOriginAndDestinationGet(Async)");
        }
        
        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException("Missing the required parameter 'fromDate' when calling cargoGetRouteFromDateProductCodeByOriginAndDestinationGet(Async)");
        }
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling cargoGetRouteFromDateProductCodeByOriginAndDestinationGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling cargoGetRouteFromDateProductCodeByOriginAndDestinationGet(Async)");
        }
        

        com.squareup.okhttp.Call call = cargoGetRouteFromDateProductCodeByOriginAndDestinationGetCall(origin, destination, fromDate, productCode, accept, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve all flights
     * Retrieve a list of all possible flights (both direct and connecting) between two airports on a given date. Routes are available for today and up to days in the future.
     * @param origin Departure Airport : 3-letter IATA airport code, e.g. FRA. (required)
     * @param destination Arrival airport : 3-letter IATA airport code, e.g. HKG. (required)
     * @param fromDate Departure date in the local time of the departure airport. Based on LAT (Latest Acceptance Time). format : yyyy-MM-dd eg : 2017-07-15 (required)
     * @param productCode Product code for requested service and specials : 3-letter eg: YNZ (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String cargoGetRouteFromDateProductCodeByOriginAndDestinationGet(String origin, String destination, String fromDate, String productCode, String accept) throws ApiException {
        ApiResponse<String> resp = cargoGetRouteFromDateProductCodeByOriginAndDestinationGetWithHttpInfo(origin, destination, fromDate, productCode, accept);
        return resp.getData();
    }

    /**
     * Retrieve all flights
     * Retrieve a list of all possible flights (both direct and connecting) between two airports on a given date. Routes are available for today and up to days in the future.
     * @param origin Departure Airport : 3-letter IATA airport code, e.g. FRA. (required)
     * @param destination Arrival airport : 3-letter IATA airport code, e.g. HKG. (required)
     * @param fromDate Departure date in the local time of the departure airport. Based on LAT (Latest Acceptance Time). format : yyyy-MM-dd eg : 2017-07-15 (required)
     * @param productCode Product code for requested service and specials : 3-letter eg: YNZ (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> cargoGetRouteFromDateProductCodeByOriginAndDestinationGetWithHttpInfo(String origin, String destination, String fromDate, String productCode, String accept) throws ApiException {
        com.squareup.okhttp.Call call = cargoGetRouteFromDateProductCodeByOriginAndDestinationGetValidateBeforeCall(origin, destination, fromDate, productCode, accept, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all flights (asynchronously)
     * Retrieve a list of all possible flights (both direct and connecting) between two airports on a given date. Routes are available for today and up to days in the future.
     * @param origin Departure Airport : 3-letter IATA airport code, e.g. FRA. (required)
     * @param destination Arrival airport : 3-letter IATA airport code, e.g. HKG. (required)
     * @param fromDate Departure date in the local time of the departure airport. Based on LAT (Latest Acceptance Time). format : yyyy-MM-dd eg : 2017-07-15 (required)
     * @param productCode Product code for requested service and specials : 3-letter eg: YNZ (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cargoGetRouteFromDateProductCodeByOriginAndDestinationGetAsync(String origin, String destination, String fromDate, String productCode, String accept, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cargoGetRouteFromDateProductCodeByOriginAndDestinationGetValidateBeforeCall(origin, destination, fromDate, productCode, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cargoShipmentTrackingByAWBPrefixAndAWBNumberGet
     * @param aWBPrefix aWBPrefix : Represents the airline that is the owner of this AWB, i.e. \&quot;020\&quot; &#x3D; Lufthansa Cargo, format : [0-9]{3} e.g. 020 (required)
     * @param aWBNumber aWBNumber : The Air Waybill Number , format : [0-9]{8} e.g. 08002050 (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cargoShipmentTrackingByAWBPrefixAndAWBNumberGetCall(String aWBPrefix, String aWBNumber, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cargo/shipmentTracking/{aWBPrefix}-{aWBNumber}"
            .replaceAll("\\{" + "aWBPrefix" + "\\}", apiClient.escapeString(aWBPrefix.toString()))
            .replaceAll("\\{" + "aWBNumber" + "\\}", apiClient.escapeString(aWBNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cargoShipmentTrackingByAWBPrefixAndAWBNumberGetValidateBeforeCall(String aWBPrefix, String aWBNumber, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aWBPrefix' is set
        if (aWBPrefix == null) {
            throw new ApiException("Missing the required parameter 'aWBPrefix' when calling cargoShipmentTrackingByAWBPrefixAndAWBNumberGet(Async)");
        }
        
        // verify the required parameter 'aWBNumber' is set
        if (aWBNumber == null) {
            throw new ApiException("Missing the required parameter 'aWBNumber' when calling cargoShipmentTrackingByAWBPrefixAndAWBNumberGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling cargoShipmentTrackingByAWBPrefixAndAWBNumberGet(Async)");
        }
        

        com.squareup.okhttp.Call call = cargoShipmentTrackingByAWBPrefixAndAWBNumberGetCall(aWBPrefix, aWBNumber, accept, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Shipment Tracking
     * With this tracking service you can easily retrieve your shipment or flight status information.
     * @param aWBPrefix aWBPrefix : Represents the airline that is the owner of this AWB, i.e. \&quot;020\&quot; &#x3D; Lufthansa Cargo, format : [0-9]{3} e.g. 020 (required)
     * @param aWBNumber aWBNumber : The Air Waybill Number , format : [0-9]{8} e.g. 08002050 (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String cargoShipmentTrackingByAWBPrefixAndAWBNumberGet(String aWBPrefix, String aWBNumber, String accept) throws ApiException {
        ApiResponse<String> resp = cargoShipmentTrackingByAWBPrefixAndAWBNumberGetWithHttpInfo(aWBPrefix, aWBNumber, accept);
        return resp.getData();
    }

    /**
     * Shipment Tracking
     * With this tracking service you can easily retrieve your shipment or flight status information.
     * @param aWBPrefix aWBPrefix : Represents the airline that is the owner of this AWB, i.e. \&quot;020\&quot; &#x3D; Lufthansa Cargo, format : [0-9]{3} e.g. 020 (required)
     * @param aWBNumber aWBNumber : The Air Waybill Number , format : [0-9]{8} e.g. 08002050 (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> cargoShipmentTrackingByAWBPrefixAndAWBNumberGetWithHttpInfo(String aWBPrefix, String aWBNumber, String accept) throws ApiException {
        com.squareup.okhttp.Call call = cargoShipmentTrackingByAWBPrefixAndAWBNumberGetValidateBeforeCall(aWBPrefix, aWBNumber, accept, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Shipment Tracking (asynchronously)
     * With this tracking service you can easily retrieve your shipment or flight status information.
     * @param aWBPrefix aWBPrefix : Represents the airline that is the owner of this AWB, i.e. \&quot;020\&quot; &#x3D; Lufthansa Cargo, format : [0-9]{3} e.g. 020 (required)
     * @param aWBNumber aWBNumber : The Air Waybill Number , format : [0-9]{8} e.g. 08002050 (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cargoShipmentTrackingByAWBPrefixAndAWBNumberGetAsync(String aWBPrefix, String aWBNumber, String accept, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cargoShipmentTrackingByAWBPrefixAndAWBNumberGetValidateBeforeCall(aWBPrefix, aWBNumber, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
