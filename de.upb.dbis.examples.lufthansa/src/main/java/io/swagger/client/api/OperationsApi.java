/*
 * LH Public API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OperationsApi {
    private ApiClient apiClient;

    public OperationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OperationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet
     * @param airportCode 3-letter IATA aiport code (e.g. &#39;ZRH&#39;) (required)
     * @param fromDateTime Start of time range in local time of arrival airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetCall(String airportCode, String fromDateTime, String accept, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/flightstatus/arrivals/{airportCode}/{fromDateTime}"
            .replaceAll("\\{" + "airportCode" + "\\}", apiClient.escapeString(airportCode.toString()))
            .replaceAll("\\{" + "fromDateTime" + "\\}", apiClient.escapeString(fromDateTime.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetValidateBeforeCall(String airportCode, String fromDateTime, String accept, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'airportCode' is set
        if (airportCode == null) {
            throw new ApiException("Missing the required parameter 'airportCode' when calling operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet(Async)");
        }
        
        // verify the required parameter 'fromDateTime' is set
        if (fromDateTime == null) {
            throw new ApiException("Missing the required parameter 'fromDateTime' when calling operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet(Async)");
        }
        

        com.squareup.okhttp.Call call = operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetCall(airportCode, fromDateTime, accept, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Flight Status at Arrival Airport
     * Status of all arrivals at a given airport up to 4 hours from the provided date time.
     * @param airportCode 3-letter IATA aiport code (e.g. &#39;ZRH&#39;) (required)
     * @param fromDateTime Start of time range in local time of arrival airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGet(String airportCode, String fromDateTime, String accept, String limit, String offset) throws ApiException {
        ApiResponse<String> resp = operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetWithHttpInfo(airportCode, fromDateTime, accept, limit, offset);
        return resp.getData();
    }

    /**
     * Flight Status at Arrival Airport
     * Status of all arrivals at a given airport up to 4 hours from the provided date time.
     * @param airportCode 3-letter IATA aiport code (e.g. &#39;ZRH&#39;) (required)
     * @param fromDateTime Start of time range in local time of arrival airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetWithHttpInfo(String airportCode, String fromDateTime, String accept, String limit, String offset) throws ApiException {
        com.squareup.okhttp.Call call = operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetValidateBeforeCall(airportCode, fromDateTime, accept, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Flight Status at Arrival Airport (asynchronously)
     * Status of all arrivals at a given airport up to 4 hours from the provided date time.
     * @param airportCode 3-letter IATA aiport code (e.g. &#39;ZRH&#39;) (required)
     * @param fromDateTime Start of time range in local time of arrival airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetAsync(String airportCode, String fromDateTime, String accept, String limit, String offset, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = operationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetValidateBeforeCall(airportCode, fromDateTime, accept, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for operationsFlightstatusByFlightNumberAndDateGet
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH400&#39;) (required)
     * @param date The departure date (YYYY-MM-DD) in the local time of the departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call operationsFlightstatusByFlightNumberAndDateGetCall(String flightNumber, String date, String accept, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/flightstatus/{flightNumber}/{date}"
            .replaceAll("\\{" + "flightNumber" + "\\}", apiClient.escapeString(flightNumber.toString()))
            .replaceAll("\\{" + "date" + "\\}", apiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call operationsFlightstatusByFlightNumberAndDateGetValidateBeforeCall(String flightNumber, String date, String accept, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'flightNumber' is set
        if (flightNumber == null) {
            throw new ApiException("Missing the required parameter 'flightNumber' when calling operationsFlightstatusByFlightNumberAndDateGet(Async)");
        }
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling operationsFlightstatusByFlightNumberAndDateGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling operationsFlightstatusByFlightNumberAndDateGet(Async)");
        }
        

        com.squareup.okhttp.Call call = operationsFlightstatusByFlightNumberAndDateGetCall(flightNumber, date, accept, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Flight Status
     * Status of a particular flight (boarding, delayed, etc.).
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH400&#39;) (required)
     * @param date The departure date (YYYY-MM-DD) in the local time of the departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String operationsFlightstatusByFlightNumberAndDateGet(String flightNumber, String date, String accept, String limit, String offset) throws ApiException {
        ApiResponse<String> resp = operationsFlightstatusByFlightNumberAndDateGetWithHttpInfo(flightNumber, date, accept, limit, offset);
        return resp.getData();
    }

    /**
     * Flight Status
     * Status of a particular flight (boarding, delayed, etc.).
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH400&#39;) (required)
     * @param date The departure date (YYYY-MM-DD) in the local time of the departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> operationsFlightstatusByFlightNumberAndDateGetWithHttpInfo(String flightNumber, String date, String accept, String limit, String offset) throws ApiException {
        com.squareup.okhttp.Call call = operationsFlightstatusByFlightNumberAndDateGetValidateBeforeCall(flightNumber, date, accept, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Flight Status (asynchronously)
     * Status of a particular flight (boarding, delayed, etc.).
     * @param flightNumber Flight number including carrier code and any suffix (e.g. &#39;LH400&#39;) (required)
     * @param date The departure date (YYYY-MM-DD) in the local time of the departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call operationsFlightstatusByFlightNumberAndDateGetAsync(String flightNumber, String date, String accept, String limit, String offset, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = operationsFlightstatusByFlightNumberAndDateGetValidateBeforeCall(flightNumber, date, accept, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet
     * @param airportCode Departure airport. 3-letter IATA airport code (e.g. &#39;HAM&#39;) (required)
     * @param fromDateTime Start of time range in local time of departure airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetCall(String airportCode, String fromDateTime, String accept, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/flightstatus/departures/{airportCode}/{fromDateTime}"
            .replaceAll("\\{" + "airportCode" + "\\}", apiClient.escapeString(airportCode.toString()))
            .replaceAll("\\{" + "fromDateTime" + "\\}", apiClient.escapeString(fromDateTime.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetValidateBeforeCall(String airportCode, String fromDateTime, String accept, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'airportCode' is set
        if (airportCode == null) {
            throw new ApiException("Missing the required parameter 'airportCode' when calling operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet(Async)");
        }
        
        // verify the required parameter 'fromDateTime' is set
        if (fromDateTime == null) {
            throw new ApiException("Missing the required parameter 'fromDateTime' when calling operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet(Async)");
        }
        

        com.squareup.okhttp.Call call = operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetCall(airportCode, fromDateTime, accept, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Flight Status at Departure Airport
     * Status of all departures from a given airport up to 4 hours from the provided date time.
     * @param airportCode Departure airport. 3-letter IATA airport code (e.g. &#39;HAM&#39;) (required)
     * @param fromDateTime Start of time range in local time of departure airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGet(String airportCode, String fromDateTime, String accept, String limit, String offset) throws ApiException {
        ApiResponse<String> resp = operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetWithHttpInfo(airportCode, fromDateTime, accept, limit, offset);
        return resp.getData();
    }

    /**
     * Flight Status at Departure Airport
     * Status of all departures from a given airport up to 4 hours from the provided date time.
     * @param airportCode Departure airport. 3-letter IATA airport code (e.g. &#39;HAM&#39;) (required)
     * @param fromDateTime Start of time range in local time of departure airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetWithHttpInfo(String airportCode, String fromDateTime, String accept, String limit, String offset) throws ApiException {
        com.squareup.okhttp.Call call = operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetValidateBeforeCall(airportCode, fromDateTime, accept, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Flight Status at Departure Airport (asynchronously)
     * Status of all departures from a given airport up to 4 hours from the provided date time.
     * @param airportCode Departure airport. 3-letter IATA airport code (e.g. &#39;HAM&#39;) (required)
     * @param fromDateTime Start of time range in local time of departure airport (YYYY-MM-DDTHH:mm) (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetAsync(String airportCode, String fromDateTime, String accept, String limit, String offset, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = operationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetValidateBeforeCall(airportCode, fromDateTime, accept, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for operationsFlightstatusRouteDateByOriginAndDestinationGet
     * @param origin 3-letter IATA airport (e.g. &#39;FRA&#39;) (required)
     * @param destination 3-letter IATA airport code (e.g. &#39;JFK&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) in local time of departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call operationsFlightstatusRouteDateByOriginAndDestinationGetCall(String origin, String destination, String date, String accept, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/flightstatus/route/{origin}/{destination}/{date}"
            .replaceAll("\\{" + "origin" + "\\}", apiClient.escapeString(origin.toString()))
            .replaceAll("\\{" + "destination" + "\\}", apiClient.escapeString(destination.toString()))
            .replaceAll("\\{" + "date" + "\\}", apiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call operationsFlightstatusRouteDateByOriginAndDestinationGetValidateBeforeCall(String origin, String destination, String date, String accept, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling operationsFlightstatusRouteDateByOriginAndDestinationGet(Async)");
        }
        
        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling operationsFlightstatusRouteDateByOriginAndDestinationGet(Async)");
        }
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling operationsFlightstatusRouteDateByOriginAndDestinationGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling operationsFlightstatusRouteDateByOriginAndDestinationGet(Async)");
        }
        

        com.squareup.okhttp.Call call = operationsFlightstatusRouteDateByOriginAndDestinationGetCall(origin, destination, date, accept, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Flight Status by Route
     * Status of flights between a given origin and destination on a given date.
     * @param origin 3-letter IATA airport (e.g. &#39;FRA&#39;) (required)
     * @param destination 3-letter IATA airport code (e.g. &#39;JFK&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) in local time of departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String operationsFlightstatusRouteDateByOriginAndDestinationGet(String origin, String destination, String date, String accept, String limit, String offset) throws ApiException {
        ApiResponse<String> resp = operationsFlightstatusRouteDateByOriginAndDestinationGetWithHttpInfo(origin, destination, date, accept, limit, offset);
        return resp.getData();
    }

    /**
     * Flight Status by Route
     * Status of flights between a given origin and destination on a given date.
     * @param origin 3-letter IATA airport (e.g. &#39;FRA&#39;) (required)
     * @param destination 3-letter IATA airport code (e.g. &#39;JFK&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) in local time of departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> operationsFlightstatusRouteDateByOriginAndDestinationGetWithHttpInfo(String origin, String destination, String date, String accept, String limit, String offset) throws ApiException {
        com.squareup.okhttp.Call call = operationsFlightstatusRouteDateByOriginAndDestinationGetValidateBeforeCall(origin, destination, date, accept, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Flight Status by Route (asynchronously)
     * Status of flights between a given origin and destination on a given date.
     * @param origin 3-letter IATA airport (e.g. &#39;FRA&#39;) (required)
     * @param destination 3-letter IATA airport code (e.g. &#39;JFK&#39;) (required)
     * @param date Departure date (YYYY-MM-DD) in local time of departure airport (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call operationsFlightstatusRouteDateByOriginAndDestinationGetAsync(String origin, String destination, String date, String accept, String limit, String offset, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = operationsFlightstatusRouteDateByOriginAndDestinationGetValidateBeforeCall(origin, destination, date, accept, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for operationsSchedulesFromDateTimeByOriginAndDestinationGet
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;ZRH&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param fromDateTime Local departure date and optionally departure time (YYYY-MM-DD or YYYY-MM-DDTHH:mm). When not provided, time is assumed to be 00:01 (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param directFlights Show only direct flights (false&#x3D;0, true&#x3D;1). Default is false (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call operationsSchedulesFromDateTimeByOriginAndDestinationGetCall(String origin, String destination, String fromDateTime, String accept, Boolean directFlights, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/schedules/{origin}/{destination}/{fromDateTime}"
            .replaceAll("\\{" + "origin" + "\\}", apiClient.escapeString(origin.toString()))
            .replaceAll("\\{" + "destination" + "\\}", apiClient.escapeString(destination.toString()))
            .replaceAll("\\{" + "fromDateTime" + "\\}", apiClient.escapeString(fromDateTime.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (directFlights != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("directFlights", directFlights));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call operationsSchedulesFromDateTimeByOriginAndDestinationGetValidateBeforeCall(String origin, String destination, String fromDateTime, String accept, Boolean directFlights, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling operationsSchedulesFromDateTimeByOriginAndDestinationGet(Async)");
        }
        
        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling operationsSchedulesFromDateTimeByOriginAndDestinationGet(Async)");
        }
        
        // verify the required parameter 'fromDateTime' is set
        if (fromDateTime == null) {
            throw new ApiException("Missing the required parameter 'fromDateTime' when calling operationsSchedulesFromDateTimeByOriginAndDestinationGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling operationsSchedulesFromDateTimeByOriginAndDestinationGet(Async)");
        }
        

        com.squareup.okhttp.Call call = operationsSchedulesFromDateTimeByOriginAndDestinationGetCall(origin, destination, fromDateTime, accept, directFlights, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Flight Schedules
     * Scheduled flights between given airports on a given date.
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;ZRH&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param fromDateTime Local departure date and optionally departure time (YYYY-MM-DD or YYYY-MM-DDTHH:mm). When not provided, time is assumed to be 00:01 (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param directFlights Show only direct flights (false&#x3D;0, true&#x3D;1). Default is false (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String operationsSchedulesFromDateTimeByOriginAndDestinationGet(String origin, String destination, String fromDateTime, String accept, Boolean directFlights, String limit, String offset) throws ApiException {
        ApiResponse<String> resp = operationsSchedulesFromDateTimeByOriginAndDestinationGetWithHttpInfo(origin, destination, fromDateTime, accept, directFlights, limit, offset);
        return resp.getData();
    }

    /**
     * Flight Schedules
     * Scheduled flights between given airports on a given date.
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;ZRH&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param fromDateTime Local departure date and optionally departure time (YYYY-MM-DD or YYYY-MM-DDTHH:mm). When not provided, time is assumed to be 00:01 (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param directFlights Show only direct flights (false&#x3D;0, true&#x3D;1). Default is false (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> operationsSchedulesFromDateTimeByOriginAndDestinationGetWithHttpInfo(String origin, String destination, String fromDateTime, String accept, Boolean directFlights, String limit, String offset) throws ApiException {
        com.squareup.okhttp.Call call = operationsSchedulesFromDateTimeByOriginAndDestinationGetValidateBeforeCall(origin, destination, fromDateTime, accept, directFlights, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Flight Schedules (asynchronously)
     * Scheduled flights between given airports on a given date.
     * @param origin Departure airport. 3-letter IATA airport code (e.g. &#39;ZRH&#39;) (required)
     * @param destination Destination airport. 3-letter IATA airport code (e.g. &#39;FRA&#39;) (required)
     * @param fromDateTime Local departure date and optionally departure time (YYYY-MM-DD or YYYY-MM-DDTHH:mm). When not provided, time is assumed to be 00:01 (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param directFlights Show only direct flights (false&#x3D;0, true&#x3D;1). Default is false (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional)
     * @param offset Number of records skipped. Defaults to 0 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call operationsSchedulesFromDateTimeByOriginAndDestinationGetAsync(String origin, String destination, String fromDateTime, String accept, Boolean directFlights, String limit, String offset, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = operationsSchedulesFromDateTimeByOriginAndDestinationGetValidateBeforeCall(origin, destination, fromDateTime, accept, directFlights, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
