/*
 * LH Public API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReferenceDataApi {
    private ApiClient apiClient;

    public ReferenceDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReferenceDataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for referencesAircraftByAircraftCodeGet
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param aircraftCode 3-character IATA aircraft code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call referencesAircraftByAircraftCodeGetCall(String accept, String aircraftCode, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/references/aircraft/{aircraftCode}"
            .replaceAll("\\{" + "aircraftCode" + "\\}", apiClient.escapeString(aircraftCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call referencesAircraftByAircraftCodeGetValidateBeforeCall(String accept, String aircraftCode, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling referencesAircraftByAircraftCodeGet(Async)");
        }
        
        // verify the required parameter 'aircraftCode' is set
        if (aircraftCode == null) {
            throw new ApiException("Missing the required parameter 'aircraftCode' when calling referencesAircraftByAircraftCodeGet(Async)");
        }
        

        com.squareup.okhttp.Call call = referencesAircraftByAircraftCodeGetCall(accept, aircraftCode, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Aircraft
     * List all aircraft types or one specific aircraft type.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param aircraftCode 3-character IATA aircraft code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String referencesAircraftByAircraftCodeGet(String accept, String aircraftCode, String limit, String offset) throws ApiException {
        ApiResponse<String> resp = referencesAircraftByAircraftCodeGetWithHttpInfo(accept, aircraftCode, limit, offset);
        return resp.getData();
    }

    /**
     * Aircraft
     * List all aircraft types or one specific aircraft type.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param aircraftCode 3-character IATA aircraft code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> referencesAircraftByAircraftCodeGetWithHttpInfo(String accept, String aircraftCode, String limit, String offset) throws ApiException {
        com.squareup.okhttp.Call call = referencesAircraftByAircraftCodeGetValidateBeforeCall(accept, aircraftCode, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Aircraft (asynchronously)
     * List all aircraft types or one specific aircraft type.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param aircraftCode 3-character IATA aircraft code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call referencesAircraftByAircraftCodeGetAsync(String accept, String aircraftCode, String limit, String offset, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = referencesAircraftByAircraftCodeGetValidateBeforeCall(accept, aircraftCode, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for referencesAirlinesByAirlineCodeGet
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airlineCode 2-character IATA airline/carrier code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call referencesAirlinesByAirlineCodeGetCall(String accept, String airlineCode, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/references/airlines/{airlineCode}"
            .replaceAll("\\{" + "airlineCode" + "\\}", apiClient.escapeString(airlineCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call referencesAirlinesByAirlineCodeGetValidateBeforeCall(String accept, String airlineCode, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling referencesAirlinesByAirlineCodeGet(Async)");
        }
        
        // verify the required parameter 'airlineCode' is set
        if (airlineCode == null) {
            throw new ApiException("Missing the required parameter 'airlineCode' when calling referencesAirlinesByAirlineCodeGet(Async)");
        }
        

        com.squareup.okhttp.Call call = referencesAirlinesByAirlineCodeGetCall(accept, airlineCode, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Airlines
     * List all airlines or one specific airline.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airlineCode 2-character IATA airline/carrier code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String referencesAirlinesByAirlineCodeGet(String accept, String airlineCode, String limit, String offset) throws ApiException {
        ApiResponse<String> resp = referencesAirlinesByAirlineCodeGetWithHttpInfo(accept, airlineCode, limit, offset);
        return resp.getData();
    }

    /**
     * Airlines
     * List all airlines or one specific airline.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airlineCode 2-character IATA airline/carrier code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> referencesAirlinesByAirlineCodeGetWithHttpInfo(String accept, String airlineCode, String limit, String offset) throws ApiException {
        com.squareup.okhttp.Call call = referencesAirlinesByAirlineCodeGetValidateBeforeCall(accept, airlineCode, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Airlines (asynchronously)
     * List all airlines or one specific airline.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airlineCode 2-character IATA airline/carrier code (required)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call referencesAirlinesByAirlineCodeGetAsync(String accept, String airlineCode, String limit, String offset, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = referencesAirlinesByAirlineCodeGetValidateBeforeCall(accept, airlineCode, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for referencesAirportsByAirportCodeGet
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airportCode 3-letter IATA airport code (required)
     * @param lang 2-letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param lhoperated Restrict the results to locations with flights operated by LH (false&#x3D;0, true&#x3D;1) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call referencesAirportsByAirportCodeGetCall(String accept, String airportCode, String lang, String limit, String offset, Boolean lhoperated, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/references/airports/{airportCode}"
            .replaceAll("\\{" + "airportCode" + "\\}", apiClient.escapeString(airportCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (lhoperated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("LHoperated", lhoperated));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call referencesAirportsByAirportCodeGetValidateBeforeCall(String accept, String airportCode, String lang, String limit, String offset, Boolean lhoperated, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling referencesAirportsByAirportCodeGet(Async)");
        }
        
        // verify the required parameter 'airportCode' is set
        if (airportCode == null) {
            throw new ApiException("Missing the required parameter 'airportCode' when calling referencesAirportsByAirportCodeGet(Async)");
        }
        

        com.squareup.okhttp.Call call = referencesAirportsByAirportCodeGetCall(accept, airportCode, lang, limit, offset, lhoperated, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Airports
     * List all airports or one specific airport. All airports response is very large. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airportCode 3-letter IATA airport code (required)
     * @param lang 2-letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param lhoperated Restrict the results to locations with flights operated by LH (false&#x3D;0, true&#x3D;1) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String referencesAirportsByAirportCodeGet(String accept, String airportCode, String lang, String limit, String offset, Boolean lhoperated) throws ApiException {
        ApiResponse<String> resp = referencesAirportsByAirportCodeGetWithHttpInfo(accept, airportCode, lang, limit, offset, lhoperated);
        return resp.getData();
    }

    /**
     * Airports
     * List all airports or one specific airport. All airports response is very large. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airportCode 3-letter IATA airport code (required)
     * @param lang 2-letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param lhoperated Restrict the results to locations with flights operated by LH (false&#x3D;0, true&#x3D;1) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> referencesAirportsByAirportCodeGetWithHttpInfo(String accept, String airportCode, String lang, String limit, String offset, Boolean lhoperated) throws ApiException {
        com.squareup.okhttp.Call call = referencesAirportsByAirportCodeGetValidateBeforeCall(accept, airportCode, lang, limit, offset, lhoperated, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Airports (asynchronously)
     * List all airports or one specific airport. All airports response is very large. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param airportCode 3-letter IATA airport code (required)
     * @param lang 2-letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param lhoperated Restrict the results to locations with flights operated by LH (false&#x3D;0, true&#x3D;1) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call referencesAirportsByAirportCodeGetAsync(String accept, String airportCode, String lang, String limit, String offset, Boolean lhoperated, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = referencesAirportsByAirportCodeGetValidateBeforeCall(accept, airportCode, lang, limit, offset, lhoperated, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for referencesAirportsNearestByLatitudeAndLongitudeGet
     * @param latitude Latitude in decimal format to at most 3 decimal places (required)
     * @param longitude Longitude in decimal format to at most 3 decimal places (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call referencesAirportsNearestByLatitudeAndLongitudeGetCall(Integer latitude, Integer longitude, String accept, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/references/airports/nearest/{latitude},{longitude}"
            .replaceAll("\\{" + "latitude" + "\\}", apiClient.escapeString(latitude.toString()))
            .replaceAll("\\{" + "longitude" + "\\}", apiClient.escapeString(longitude.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call referencesAirportsNearestByLatitudeAndLongitudeGetValidateBeforeCall(Integer latitude, Integer longitude, String accept, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling referencesAirportsNearestByLatitudeAndLongitudeGet(Async)");
        }
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling referencesAirportsNearestByLatitudeAndLongitudeGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling referencesAirportsNearestByLatitudeAndLongitudeGet(Async)");
        }
        

        com.squareup.okhttp.Call call = referencesAirportsNearestByLatitudeAndLongitudeGetCall(latitude, longitude, accept, lang, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Nearest Airports
     * List the 5 closest airports to the given latitude and longitude, irrespective of the radius of the reference point.
     * @param latitude Latitude in decimal format to at most 3 decimal places (required)
     * @param longitude Longitude in decimal format to at most 3 decimal places (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String referencesAirportsNearestByLatitudeAndLongitudeGet(Integer latitude, Integer longitude, String accept, String lang) throws ApiException {
        ApiResponse<String> resp = referencesAirportsNearestByLatitudeAndLongitudeGetWithHttpInfo(latitude, longitude, accept, lang);
        return resp.getData();
    }

    /**
     * Nearest Airports
     * List the 5 closest airports to the given latitude and longitude, irrespective of the radius of the reference point.
     * @param latitude Latitude in decimal format to at most 3 decimal places (required)
     * @param longitude Longitude in decimal format to at most 3 decimal places (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> referencesAirportsNearestByLatitudeAndLongitudeGetWithHttpInfo(Integer latitude, Integer longitude, String accept, String lang) throws ApiException {
        com.squareup.okhttp.Call call = referencesAirportsNearestByLatitudeAndLongitudeGetValidateBeforeCall(latitude, longitude, accept, lang, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Nearest Airports (asynchronously)
     * List the 5 closest airports to the given latitude and longitude, irrespective of the radius of the reference point.
     * @param latitude Latitude in decimal format to at most 3 decimal places (required)
     * @param longitude Longitude in decimal format to at most 3 decimal places (required)
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call referencesAirportsNearestByLatitudeAndLongitudeGetAsync(Integer latitude, Integer longitude, String accept, String lang, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = referencesAirportsNearestByLatitudeAndLongitudeGetValidateBeforeCall(latitude, longitude, accept, lang, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for referencesCitiesByCityCodeGet
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cityCode 3-letter IATA city code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call referencesCitiesByCityCodeGetCall(String accept, String cityCode, String lang, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/references/cities/{cityCode}"
            .replaceAll("\\{" + "cityCode" + "\\}", apiClient.escapeString(cityCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call referencesCitiesByCityCodeGetValidateBeforeCall(String accept, String cityCode, String lang, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling referencesCitiesByCityCodeGet(Async)");
        }
        
        // verify the required parameter 'cityCode' is set
        if (cityCode == null) {
            throw new ApiException("Missing the required parameter 'cityCode' when calling referencesCitiesByCityCodeGet(Async)");
        }
        

        com.squareup.okhttp.Call call = referencesCitiesByCityCodeGetCall(accept, cityCode, lang, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cities
     * List all cities or one specific city. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cityCode 3-letter IATA city code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String referencesCitiesByCityCodeGet(String accept, String cityCode, String lang, String limit, String offset) throws ApiException {
        ApiResponse<String> resp = referencesCitiesByCityCodeGetWithHttpInfo(accept, cityCode, lang, limit, offset);
        return resp.getData();
    }

    /**
     * Cities
     * List all cities or one specific city. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cityCode 3-letter IATA city code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> referencesCitiesByCityCodeGetWithHttpInfo(String accept, String cityCode, String lang, String limit, String offset) throws ApiException {
        com.squareup.okhttp.Call call = referencesCitiesByCityCodeGetValidateBeforeCall(accept, cityCode, lang, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cities (asynchronously)
     * List all cities or one specific city. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param cityCode 3-letter IATA city code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call referencesCitiesByCityCodeGetAsync(String accept, String cityCode, String lang, String limit, String offset, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = referencesCitiesByCityCodeGetValidateBeforeCall(accept, cityCode, lang, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for referencesCountriesByCountryCodeGet
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param countryCode 2-letter ISO 3166-1 country code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call referencesCountriesByCountryCodeGetCall(String accept, String countryCode, String lang, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/references/countries/{countryCode}"
            .replaceAll("\\{" + "countryCode" + "\\}", apiClient.escapeString(countryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call referencesCountriesByCountryCodeGetValidateBeforeCall(String accept, String countryCode, String lang, String limit, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling referencesCountriesByCountryCodeGet(Async)");
        }
        
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling referencesCountriesByCountryCodeGet(Async)");
        }
        

        com.squareup.okhttp.Call call = referencesCountriesByCountryCodeGetCall(accept, countryCode, lang, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Countries
     * List all countries or one specific country. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param countryCode 2-letter ISO 3166-1 country code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String referencesCountriesByCountryCodeGet(String accept, String countryCode, String lang, String limit, String offset) throws ApiException {
        ApiResponse<String> resp = referencesCountriesByCountryCodeGetWithHttpInfo(accept, countryCode, lang, limit, offset);
        return resp.getData();
    }

    /**
     * Countries
     * List all countries or one specific country. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param countryCode 2-letter ISO 3166-1 country code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> referencesCountriesByCountryCodeGetWithHttpInfo(String accept, String countryCode, String lang, String limit, String offset) throws ApiException {
        com.squareup.okhttp.Call call = referencesCountriesByCountryCodeGetValidateBeforeCall(accept, countryCode, lang, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Countries (asynchronously)
     * List all countries or one specific country. It is possible to request the response in a specific language.
     * @param accept http header: application/json or application/xml (Acceptable values are: \&quot;application/json\&quot;, \&quot;application/xml\&quot;) (required)
     * @param countryCode 2-letter ISO 3166-1 country code (required)
     * @param lang 2 letter ISO 3166-1 language code (optional)
     * @param limit Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken) (optional, default to 20)
     * @param offset Number of records skipped. Defaults to 0 (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call referencesCountriesByCountryCodeGetAsync(String accept, String countryCode, String lang, String limit, String offset, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = referencesCountriesByCountryCodeGetValidateBeforeCall(accept, countryCode, lang, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
